// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UralHiking.Database;

#nullable disable

namespace UralHiking.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20251031190044_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GearItemHikingRoute", b =>
                {
                    b.Property<int>("GearItemsId")
                        .HasColumnType("int");

                    b.Property<int>("HikingRoutesId")
                        .HasColumnType("int");

                    b.HasKey("GearItemsId", "HikingRoutesId");

                    b.HasIndex("HikingRoutesId");

                    b.ToTable("HikingRoutesGearItems", (string)null);
                });

            modelBuilder.Entity("UralHiking.Models.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("HikingRouteId")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.HasKey("Id");

                    b.HasIndex("HikingRouteId");

                    b.ToTable("Coordinates");

                    b.HasAnnotation("Relational:JsonPropertyName", "coordinates");
                });

            modelBuilder.Entity("UralHiking.Models.GearItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    b.ToTable("GearItems");
                });

            modelBuilder.Entity("UralHiking.Models.HikingRoute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AscentMeters")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ascent_meters");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int>("DifficultyInternal")
                        .HasColumnType("int");

                    b.Property<int>("DistanceMeters")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "distance_meters");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "duration_minutes");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "location_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "photo_url");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "review_count");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "short_description");

                    b.HasKey("Id");

                    b.ToTable("HikingRoutes");
                });

            modelBuilder.Entity("GearItemHikingRoute", b =>
                {
                    b.HasOne("UralHiking.Models.GearItem", null)
                        .WithMany()
                        .HasForeignKey("GearItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UralHiking.Models.HikingRoute", null)
                        .WithMany()
                        .HasForeignKey("HikingRoutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UralHiking.Models.Coordinate", b =>
                {
                    b.HasOne("UralHiking.Models.HikingRoute", "HikingRoute")
                        .WithMany("Coordinates")
                        .HasForeignKey("HikingRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HikingRoute");
                });

            modelBuilder.Entity("UralHiking.Models.HikingRoute", b =>
                {
                    b.Navigation("Coordinates");
                });
#pragma warning restore 612, 618
        }
    }
}
